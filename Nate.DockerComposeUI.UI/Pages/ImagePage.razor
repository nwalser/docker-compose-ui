@page "/images/{ImageOrganisation}/{ImageNamespace}/{ImageTag}/"
@using Nate.DockerComposeUI.Deployment.Repository

@if (ImageLayout != null)
{
    <MudText Typo="Typo.h2">@ImageLayout.Namespace : @ImageLayout.Tag</MudText>
    
    <MudGrid>
        <MudItem xs="9">
            <MudGrid>
                @foreach (var deployment in Deployments)
                {
                    <MudItem xs="12">
                        <DeploymentCard Deployment="deployment"/>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>

        <MudItem xs="3">
            <MudGrid>
                <MudItem xs="12">
                    <PortsCard Ports="ImageLayout.Ports" />
                </MudItem>
                <MudItem xs="12">
                    <EnvironmentVariablesCard EnvironmentVariables="ImageLayout.EnvironmentVariables"/>
                </MudItem>
                <MudItem xs="12">
                    <ConfigurationFilesCard ConfigurationFiles="ImageLayout.ConfigurationFiles"/>
                </MudItem>
                <MudItem xs="12">
                    <SecretsCard Secrets="ImageLayout.Secrets"/>
                </MudItem>
                <MudItem xs="12">
                    <VolumesCard Volumes="ImageLayout.Volumes"/>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
}
else
{
    <MudText>Loading...</MudText>
}


@code {
    [Inject]
    private IImageRepository Repository { get; set; } = null!;
    
    [Inject]
    private IDeploymentRepository DeplRepository { get; set; } = null!;
    
    [Parameter]
    public string? ImageOrganisation { get; set; }
    [Parameter]
    public string? ImageNamespace { get; set; }
    [Parameter]
    public string? ImageTag { get; set; }

    private ImageLayout? ImageLayout { get; set; } = new();
    private List<Deployment> Deployments { get; set; } = new();
    
    
    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(ImageOrganisation);
        ArgumentNullException.ThrowIfNull(ImageNamespace);
        ArgumentNullException.ThrowIfNull(ImageTag);

        ImageLayout = await Repository.Load(ImageOrganisation, ImageNamespace, ImageTag);

        Deployments = await DeplRepository.Load(ImageOrganisation, ImageNamespace, ImageTag);
    }
}